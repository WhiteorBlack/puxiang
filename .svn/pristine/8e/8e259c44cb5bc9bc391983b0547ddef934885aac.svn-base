package com.puxiang.mall.module.shop.viewModel;

import android.app.Activity;
import android.databinding.BaseObservable;
import android.databinding.Bindable;
import android.databinding.ObservableBoolean;
import android.databinding.ObservableField;
import android.os.Bundle;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.View;

import com.chad.library.adapter.base.BaseQuickAdapter;
import com.chad.library.adapter.base.listener.OnItemClickListener;
import com.puxiang.mall.BR;
import com.puxiang.mall.BaseBindActivity;
import com.puxiang.mall.R;
import com.puxiang.mall.fragment.BaseBindFragment;
import com.puxiang.mall.model.data.RxShop;
import com.puxiang.mall.model.data.RxShopList;
import com.puxiang.mall.module.shop.adapter.ShopListAdapter;
import com.puxiang.mall.mvvm.base.ViewModel;
import com.puxiang.mall.network.NetworkSubscriber;
import com.puxiang.mall.network.retrofit.ApiWrapper;
import com.puxiang.mall.network.retrofit.RetrofitUtil;
import com.puxiang.mall.utils.ActivityUtil;
import com.trello.rxlifecycle2.android.ActivityEvent;
import com.trello.rxlifecycle2.android.FragmentEvent;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by zhaoyong bai on 2017/10/12.
 */

public class ShopViewModel extends BaseObservable implements ViewModel {

    private BaseBindFragment fragment;
    private BaseBindActivity activity;
    public ObservableField<String> searchText = new ObservableField<>("请输入商户名、地点");
    public ObservableField<String> cityText = new ObservableField<>("全城");
    public ObservableField<String> descText = new ObservableField<>("智能排序");
    private ObservableBoolean isTopVisible = new ObservableBoolean(false);
    private int pageNo = 1;
    private ShopListAdapter adapter;
    private String keyword = "", areaCode = "", orderBy = "defalut";
    private ObservableBoolean isInitData = new ObservableBoolean(false);

    public ShopViewModel(BaseBindFragment fragment, ShopListAdapter adapter) {
        this.fragment = fragment;
        this.activity = (BaseBindActivity) fragment.getActivity();
        this.adapter = adapter;
        EventBus.getDefault().register(this);
    }

    public ShopViewModel(BaseBindActivity fragment, ShopListAdapter adapter) {
        this.activity = fragment;
        this.adapter = adapter;
        EventBus.getDefault().register(this);
    }

    @Bindable
    public String getCityText() {
        return cityText.get();
    }

    public void setCityText(String cityText) {
        this.cityText.set(cityText);
        notifyPropertyChanged(BR.cityText);
    }

    @Bindable
    public String getDescText() {
        return descText.get();
    }

    public void setDescText(String cityText) {
        this.descText.set(cityText);
        notifyPropertyChanged(BR.descText);
    }

    public boolean getIsTopVisible() {
        return isTopVisible.get();
    }

    public void setIsTopVisible(boolean isTopVisible) {
        this.isTopVisible.set(isTopVisible);
    }

    @Bindable
    public String getSearchText() {
        return searchText.get();
    }

    public void setSearchText(String searchText) {
        this.searchText.set(searchText);
    }

    public void loadMore() {
        pageNo++;
        getShopList(pageNo, keyword, areaCode, orderBy);
    }

    public void getShopList(int pageNo, String keyword, String areaCode, String orderBy) {
        if (pageNo == 1) {
            this.pageNo = 1;
            this.keyword = keyword;
            this.areaCode = areaCode;
            this.orderBy = orderBy;
        }
        ApiWrapper.getInstance()
                .getShopList(keyword, areaCode, this.pageNo, this.orderBy)
                .compose(fragment != null ? fragment.bindUntilEvent(FragmentEvent.DESTROY) : activity.bindUntilEvent(ActivityEvent.DESTROY))
                .subscribe(new NetworkSubscriber<RxShopList>() {
                    @Override
                    public void onFail(RetrofitUtil.APIException e) {
                        super.onFail(e);
                        if (fragment != null)
                            fragment.refreshFail();
                        else activity.refreshFail();
                    }

                    @Override
                    public void onSuccess(RxShopList data) {
                        if (fragment != null)
                            fragment.refreshOK();
                        else activity.refreshOK();
                        adapter.setPagingData(data.getList(), pageNo);
                        isInitData.set(true);
                        notifyPropertyChanged(BR.isInitData);
                    }
                });
    }

    public RecyclerView.OnItemTouchListener onItemTouchListener() {
        return new OnItemClickListener() {
            @Override
            public void onSimpleItemClick(BaseQuickAdapter adapter, View view, int position) {
                RxShop rxShop = (RxShop) adapter.getData().get(position);
                ActivityUtil.startShopDetialActivity(activity, rxShop.getShopId());
            }
        };
    }

    public void setIsInitData(boolean isInitData) {
        this.isInitData.set(isInitData);
    }

    @Bindable
    public boolean getIsInitData() {
        return isInitData.get();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEvent(Bundle area) {
        switch (area.getInt("type")) {
            case 0:
                if (!TextUtils.equals(getCityText(), area.getString("content")))
                    setCityText(area.getString("content"));
                areaCode = area.getString("code");
                getShopList(1, keyword, areaCode, orderBy);
                break;
            case 1:
                if (!TextUtils.equals(getDescText(), area.getString("content"))) {
                    setDescText(area.getString("content"));
                    orderBy = area.getString("code");
                    getShopList(1, keyword, areaCode, orderBy);
                }
                break;
        }

    }

    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.tv_location:
                ActivityUtil.startCityActivity(activity);
                break;
        }
    }

    @Override
    public void destroy() {
        EventBus.getDefault().unregister(this);
    }
}
